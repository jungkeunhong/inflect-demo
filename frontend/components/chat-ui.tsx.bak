"use client"

import type React from "react"
import { useState, useRef, useEffect } from "react"
import { Send, RefreshCw, Copy, Bot } from "lucide-react"
import { Button } from "@/components/ui/button"
import { cn } from "@/lib/utils"
import { type Message } from "@/lib/types"
import { v4 as uuidv4 } from 'uuid'
import { toast } from "sonner"
import { ApiKeyMessage } from "@/components/api-key/api-key-message"
import { ChatInputWithActions } from "@/components/chat-input-with-actions"
import { motion, AnimatePresence } from "framer-motion"

export interface ChatUIProps {
  apiEndpoint?: string
  initialMessages?: Message[]
  messages?: Message[]
  placeholder?: string
  className?: string
  actionButtons?: {
    label: string
    icon?: React.ReactNode
    onClick: () => void
  }[]
  onMessagesChange?: (messages: Message[]) => void
  hideMessages?: boolean
  onSubmit?: (message: string) => void
  availableTools?: string[]
  onToolSelect?: (tools: string[]) => void
  onApiKeySubmit?: (key: string, service: string) => void
}

export function ChatUI({
  apiEndpoint = "/api/chat",
  initialMessages = [],
  messages: controlledMessages,
  placeholder = "Message v0...",
  className,
  actionButtons = [],
  onMessagesChange,
  hideMessages = false,
  onSubmit,
  availableTools = [],
  onToolSelect,
  onApiKeySubmit,
}: ChatUIProps) {
  // Controlled messages: use prop if provided, else fallback to initialMessages
  const [input, setInput] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const fileInputRef = useRef<HTMLInputElement>(null)
  const [localMessages, setLocalMessages] = useState<Message[]>([])
  const [animatingMessageIndex, setAnimatingMessageIndex] = useState<number | null>(null);
  const [displayedMessages, setDisplayedMessages] = useState<Message[]>([]);

  // Use either controlled messages or local messages
  const activeMessages = controlledMessages ?? localMessages
  
  // initialMessages에 id가 없는 경우 추가 (for useChat, if needed)
  const messagesWithIds = initialMessages.map(msg => ({
    ...msg,
    id: msg.id || uuidv4()
  }))
  
  // Initialize local messages if no controlled messages are provided
  useEffect(() => {
    if (!controlledMessages && initialMessages.length > 0) {
      setLocalMessages(initialMessages)
    }
  }, [controlledMessages, initialMessages])

  const { input: chatInput, handleInputChange, handleSubmit: useChatHandleSubmit, isLoading: useChatIsLoading, stop, reload } = useChat({
    api: apiEndpoint,
    initialMessages: messagesWithIds,
    onResponse: (response) => {
      // 응답 헤더 확인
      const contentType = response.headers.get("content-type");
      if (contentType?.includes("text/event-stream")) {
        // 스트리밍 응답 처리
        const reader = response.body?.getReader();
        if (reader) {
          const decoder = new TextDecoder();
          let buffer = "";
          
          const processStream = async () => {
            try {
              while (true) {
                const { done, value } = await reader.read();
                if (done) break;
                
                buffer += decoder.decode(value, { stream: true });
                const lines = buffer.split("\n");
                buffer = lines.pop() || "";
                
                for (const line of lines) {
                  if (line.startsWith("data: ")) {
                    const data = line.slice(6);
                    if (data === "[DONE]") break;
                    try {
                      const parsed = JSON.parse(data);
                      // 메시지 업데이트 로직
                    } catch (e) {
                      console.error("Error parsing streaming data:", e);
                    }
                  }
                }
              }
            } catch (error) {
              console.error("Error processing stream:", error);
            }
          };
          
          processStream();
        }
      }
    },
  })

  // Auto-grow textarea
  const handleTextareaChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setInput(e.target.value)
    handleInputChange(e)

    // Reset height to auto to get the correct scrollHeight
    e.target.style.height = "auto"
    // Set the height to scrollHeight to expand the textarea
    e.target.style.height = `${Math.min(e.target.scrollHeight, 200)}px`
  }

  // Auto-scroll to bottom when new messages arrive
  useEffect(() => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: "smooth" })
    }
  }, [activeMessages])

  useEffect(() => {
    onMessagesChange?.(activeMessages)
  }, [activeMessages, onMessagesChange])

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    if (!input.trim() || isLoading) return

    if (onSubmit) {
      onSubmit(input)
      setInput("")
      return
    }

    const userMessage: Message = {
      id: crypto.randomUUID(),
      role: "user",
      content: input,
      createdAt: new Date(),
    }

    setLocalMessages((prev) => [...prev, userMessage])
    setInput("")
    setIsLoading(true)
    setError(null)

    try {
      const response = await sendChatMessage(input)
      const reader = response.getReader()
      const decoder = new TextDecoder()
      let buffer = ""

      while (true) {
        const { done, value } = await reader.read()
        if (done) break

        buffer += decoder.decode(value, { stream: true })
        const lines = buffer.split("\n")
        buffer = lines.pop() || ""

        for (const line of lines) {
          if (line.startsWith("data: ")) {
            try {
              const data = JSON.parse(line.slice(6))
              if (data.output) {
                setLocalMessages((prev) => {
                  const lastMessage = prev[prev.length - 1]
                  if (lastMessage?.role === "assistant") {
                    return [
                      ...prev.slice(0, -1),
                      { ...lastMessage, content: lastMessage.content + data.output },
                    ]
                  }
                  return [
                    ...prev,
                    {
                      id: crypto.randomUUID(),
                      role: "assistant",
                      content: data.output,
                      createdAt: new Date(),
                    },
                  ]
                })
              }
            } catch (e) {
              console.error("Error parsing message:", e)
            }
          }
        }
      }
    } catch (error) {
      const errorMessage = getErrorMessage(error)
      setError(errorMessage)
      toast.error(errorMessage)
    } finally {
      setIsLoading(false)
    }
  }

  // Copy chat to clipboard
  const copyToClipboard = () => {
    const chatText = activeMessages
      .map((message) => `${message.role === "user" ? "You" : "AI"}: ${message.content}`)
      .join("\n\n")
    navigator.clipboard.writeText(chatText)
  }

  // Download chat as text file
  const downloadChat = () => {
    const chatText = activeMessages
      .map((message) => `${message.role === "user" ? "You" : "AI"}: ${message.content}`)
      .join("\n\n")
    const blob = new Blob([chatText], { type: "text/plain" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = "chat-history.txt"
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const handleUploadClick = () => {
    fileInputRef.current?.click()
  }

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files
    if (files && files.length > 0) {
      // For now, just log the file(s)
      Array.from(files).forEach(file => {
        console.log("Selected file:", file)
      })
    }
  }

  // Tool selection state (for multi-select)
  const [selectedTools, setSelectedTools] = useState<string[]>([])

  const AnimatedText = ({ text, onComplete }: { text: string, onComplete?: () => void }) => {
    const characters = text.split("");
    
    return (
      <div>
        {characters.map((char, index) => (
          <motion.span
            key={index}
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ 
              delay: index * 0.01,
              onComplete: index === characters.length - 1 ? onComplete : undefined
            }}
          >
            {char}
          </motion.span>
        ))}
      </div>
    );
  };

  // 메시지 배열이 변경될 때마다 순차적으로 표시
  useEffect(() => {
    console.log('ChatUI: Messages changed', {
      controlledMessages: controlledMessages?.length,
      displayedMessages: displayedMessages.length,
      firstMessage: controlledMessages?.[0]?.content?.substring(0, 20)
    });
    
    if (controlledMessages && controlledMessages.length > 0) {
      // 새 메시지가 추가되었는지 확인
      if (controlledMessages.length > displayedMessages.length) {
        // 이전에 표시되지 않은 메시지가 있으면 첫 번째 메시지만 표시
        if (displayedMessages.length === 0) {
          console.log('ChatUI: Setting first message', controlledMessages[0]?.content?.substring(0, 30));
          setDisplayedMessages([controlledMessages[0]]);
          if (controlledMessages[0]?.role === "assistant") {
            setAnimatingMessageIndex(0);
          }
        } else {
          // 마지막으로 표시된 메시지 이후의 첫 번째 메시지 표시
          const nextMessageIndex = displayedMessages.length;
          if (nextMessageIndex < controlledMessages.length) {
            console.log('ChatUI: Adding next message', controlledMessages[nextMessageIndex]?.content?.substring(0, 30));
            setDisplayedMessages([...displayedMessages, controlledMessages[nextMessageIndex]]);
            if (controlledMessages[nextMessageIndex]?.role === "assistant") {
              setAnimatingMessageIndex(nextMessageIndex);
            }
          }
        }
      } else if (controlledMessages.length === displayedMessages.length && displayedMessages.length > 0) {
        // 메시지 내용 업데이트가 있을 수 있으므로 비교
        const lastControlledMessage = controlledMessages[controlledMessages.length - 1];
        const lastDisplayedMessage = displayedMessages[displayedMessages.length - 1];
        
        // content 속성이 존재하는지 확인
        if (lastControlledMessage && lastDisplayedMessage && 
            'content' in lastControlledMessage && 'content' in lastDisplayedMessage &&
            lastControlledMessage.content !== lastDisplayedMessage.content) {
          
          console.log('ChatUI: Updating message content', {
            old: lastDisplayedMessage.content?.substring(0, 30),
            new: lastControlledMessage.content?.substring(0, 30)
          });
          
          setDisplayedMessages([...controlledMessages]);
          if (lastControlledMessage.role === "assistant") {
            setAnimatingMessageIndex(controlledMessages.length - 1);
          }
        }
      }
    } else if (controlledMessages && controlledMessages.length === 0) {
      // Reset displayed messages when controlled messages are empty
      console.log('ChatUI: Resetting displayed messages');
      setDisplayedMessages([]);
    }
  }, [controlledMessages, displayedMessages]);
  
  // 애니메이션이 완료되면 다음 메시지를 표시
  const handleAnimationComplete = useCallback(() => {
    setAnimatingMessageIndex(null);
    
    // 아직 표시되지 않은 메시지가 있으면 다음 메시지 표시
    if (controlledMessages && displayedMessages.length < controlledMessages.length) {
      const nextIndex = displayedMessages.length;
      if (nextIndex < controlledMessages.length && controlledMessages[nextIndex]) {
        setDisplayedMessages([...displayedMessages, controlledMessages[nextIndex]]);
        if (controlledMessages[nextIndex]?.role === "assistant") {
          setAnimatingMessageIndex(nextIndex);
        }
      }
    }
  }, [controlledMessages, displayedMessages]);
  
  // 사용할 메시지 배열 결정
  const messagesToShow = displayedMessages.length > 0 ? displayedMessages : localMessages;
  
  // 채팅 메시지 컴포넌트 수정
  const ChatMessage = ({ 
    message, 
    index,
    isAnimating
  }: { 
    message: Message, 
    index: number,
    isAnimating: boolean
  }) => {
    const handleTextAnimationComplete = () => {
      if (isAnimating) {
        handleAnimationComplete();
      }
    };
    
    // message 객체가 유효한지 확인
    if (!message || typeof message !== 'object') {
      console.error('Invalid message object:', message);
      return null;
    }
    
    // content가 없으면 빈 문자열 사용
    const messageContent = message.content || '';
    
    return (
      <motion.div 
        key={message.id}
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.3 }}
        className={cn("flex", message.role === "user" ? "justify-end" : "justify-start")}
      >
        <div
          className={cn(
            "max-w-[80%] rounded-lg p-4",
            message.role === "user" ? "bg-primary text-primary-foreground" : "bg-background text-foreground",
          )}
        >
          <div className="whitespace-pre-wrap">
            {message.role === "assistant" && isAnimating ? (
              <AnimatedText text={messageContent} onComplete={handleTextAnimationComplete} />
            ) : (
              messageContent
            )}
          </div>
        </div>
      </motion.div>
    );
  };

  return (
    <div className={cn("flex flex-col h-full", className)}>
      {/* Chat messages */}
      {!hideMessages && (
        <div className="font-switzer flex-1 overflow-y-auto p-4 space-y-6 min-h-0">
          <AnimatePresence>
            {messagesToShow.map((message, index) => {
              // Tool selection message detection
              const isToolSelection =
                typeof message.content === 'string' &&
                (message.content.toLowerCase().includes('which tools would you like to use?') ||
                message.content.toLowerCase().includes('which tools would you like to connect?')) &&
                availableTools.length > 0;
              
              // API key input message type
              if (message.type === "api_key_input" || message.type === "api_keys_group") {
                return (
                  <ApiKeyMessage
                    key={message.id}
                    message={message}
                    onSubmit={onApiKeySubmit}
                  />
                );
              }
              
              if (isToolSelection) {
                return (
                  <motion.div 
                    key={message.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    className="flex flex-col items-start space-y-4"
                  >
                    <div className="bg-background text-foreground rounded-lg p-4">
                      <div className="mb-4">{message.content}</div>
                      <div className="flex flex-wrap gap-2">
                        {availableTools.map((tool) => (
                          <Button
                            key={tool}
                            variant={selectedTools.includes(tool) ? "default" : "outline"}
                            size="sm"
                            className={selectedTools.includes(tool) ? "" : "border-gray-200"}
                            onClick={() => {
                              setSelectedTools((prev) =>
                                prev.includes(tool)
                                  ? prev.filter((t) => t !== tool)
                                  : [...prev, tool]
                              )
                            }}
                          >
                            {tool}
                          </Button>
                        ))}
                      </div>
                    </div>
                    <Button
                      variant="secondary"
                      size="sm"
                      disabled={selectedTools.length === 0}
                      onClick={() => {
                        if (onToolSelect) onToolSelect(selectedTools)
                        setSelectedTools([])
                      }}
                    >
                      Continue
                    </Button>
                  </motion.div>
                )
              }
              
              return (
                <ChatMessage 
                  key={message.id}
                  message={message}
                  index={index}
                  isAnimating={animatingMessageIndex === index}
                />
              )
            })}
          </AnimatePresence>
          {isLoading && (
            <div className="flex justify-start">
              <div className="bg-background rounded-lg p-3">
                <div className="flex space-x-2">
                  <div className="w-2 h-2 bg-primary rounded-full animate-bounce" />
                  <div className="w-2 h-2 bg-primary rounded-full animate-bounce delay-100" />
                  <div className="w-2 h-2 bg-primary rounded-full animate-bounce delay-200" />
                </div>
              </div>
            </div>
          )}
          <div ref={messagesEndRef} />
        </div>
      )}

      {error && (
        <div className="p-4 bg-destructive/10 text-destructive text-sm">
          {error}
        </div>
      )}

      {/* Input area */}
      <Card className="bg-transparent">
        <ChatInputWithActions
          value={input}
          onChange={handleTextareaChange}
          onSubmit={handleSubmit}
          placeholder={placeholder}
          disabled={isLoading}
          actionLabel="Send"
          showAttach={false}
          actionButtons={[
            ...actionButtons.map((button, index) => (
              <Button 
                key={index} 
                variant="ghost" 
                size="sm" 
                onClick={button.onClick}
                className="text-gray-500 hover:text-gray-700 hover:bg-transparent"
              >
                {button.icon && <span className="mr-2">{button.icon}</span>}
                {button.label}
              </Button>
            )),
            <Button 
              key="copy" 
              variant="ghost" 
              size="sm" 
              onClick={copyToClipboard} 
              disabled={activeMessages.length === 0}
              className="text-gray-500 hover:text-gray-700 hover:bg-transparent"
            >
              <Copy className="h-4 w-4" />
            </Button>
          ]}
        />
        
        <input
          ref={fileInputRef}
          type="file"
          multiple
          className="hidden"
          onChange={handleFileChange}
          title="Upload file"
        />
      </Card>
    </div>
  )
} 